# compose.yaml
# Orquesta servicios Docker. Base de datos + Backend Flask + Frontend Nginx.

services:
  db:
    image: postgres:16             # Usamos Postgres versión 16 (estable)
    container_name: db             # Nombre del contenedor (para identificarlo fácil)
    restart: "no"                  # Solo se inicia cuando tú lo ejecutes
    env_file: .env                 # Carga variables desde .env
    environment:
      # Estas variables son las que Postgres espera para crear el usuario/DB iniciales y las jalo desde .env
      POSTGRES_USER: ${DB_USUARIO}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      # Publica el puerto interno 5432 como externo 5433
      - "5433:5432"
    volumes:
      # Volumen persistente: tus datos NO se perderán al apagar el contenedor
      - datos_pg:/var/lib/postgresql/data
    healthcheck:
      # Comprueba que Postgres esté listo para aceptar conexiones antes de “depender” de él
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Servicio del backend Flask
  backend:
    build: ./backend                    # Construye desde backend/Dockerfile
    container_name: backend             # Nombre del contenedor
    restart: "no"                       # Solo se inicia cuando tú lo ejecutes
    env_file: .env                      # Carga variables desde .env
    ports:
      # Expone el puerto del backend en tu máquina local
      - "${BACKEND_PORT}:5000"
    depends_on:
      db:                               # Espera a que la base de datos esté lista
        condition: service_healthy
    volumes:
      # Monta el código para desarrollo (cambios en tiempo real)
      - ./backend:/app
    environment:
      # Variables específicas para Flask
      FLASK_ENV: ${MODO}
      FLASK_DEBUG: "true"

  # Servicio del frontend con Nginx
  frontend:
    build: ./frontend                   # Construye desde frontend/Dockerfile
    container_name: frontend            # Nombre del contenedor
    restart: "no"                       # Solo se inicia cuando tú lo ejecutes
    ports:
      # Expone el puerto del frontend en tu máquina local
      - "${FRONTEND_PORT}:80"
    depends_on:
      - backend                         # Espera a que el backend esté listo
    volumes:
      # Monta el código para desarrollo (cambios en tiempo real)
      - ./frontend:/usr/share/nginx/html

# Declaración del volumen (para persistencia de datos)
volumes:
  datos_pg:
